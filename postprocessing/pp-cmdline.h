/** @file pp-cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef PP_CMDLINE_H
#define PP_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "janus-pp-rec"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "janus-pp-rec"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.11.3"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int file_extensions_flag;	/**< @brief Only print the supported target file extensions per codec (default=off).  */
  const char *file_extensions_help; /**< @brief Only print the supported target file extensions per codec help description.  */
  int json_flag;	/**< @brief Only print JSON header (default=off).  */
  const char *json_help; /**< @brief Only print JSON header help description.  */
  int header_flag;	/**< @brief Only parse .mjr header (default=off).  */
  const char *header_help; /**< @brief Only parse .mjr header help description.  */
  int parse_flag;	/**< @brief Only parse and re-order packets (default=off).  */
  const char *parse_help; /**< @brief Only parse and re-order packets help description.  */
  char * metadata_arg;	/**< @brief Save this metadata string in the target file.  */
  char * metadata_orig;	/**< @brief Save this metadata string in the target file original value given at command line.  */
  const char *metadata_help; /**< @brief Save this metadata string in the target file help description.  */
  int ignore_first_arg;	/**< @brief Number of first packets to ignore when processing, e.g., in case they're cause of issues (default=0).  */
  char * ignore_first_orig;	/**< @brief Number of first packets to ignore when processing, e.g., in case they're cause of issues (default=0) original value given at command line.  */
  const char *ignore_first_help; /**< @brief Number of first packets to ignore when processing, e.g., in case they're cause of issues (default=0) help description.  */
  int payload_type_arg;	/**< @brief Ignore all RTP packets that don't match the specified payload type (default=none).  */
  char * payload_type_orig;	/**< @brief Ignore all RTP packets that don't match the specified payload type (default=none) original value given at command line.  */
  const char *payload_type_help; /**< @brief Ignore all RTP packets that don't match the specified payload type (default=none) help description.  */
  int audiolevel_ext_arg;	/**< @brief ID of the audio-levels RTP extension (default=none).  */
  char * audiolevel_ext_orig;	/**< @brief ID of the audio-levels RTP extension (default=none) original value given at command line.  */
  const char *audiolevel_ext_help; /**< @brief ID of the audio-levels RTP extension (default=none) help description.  */
  int videoorient_ext_arg;	/**< @brief ID of the video-orientation RTP extension (default=none).  */
  char * videoorient_ext_orig;	/**< @brief ID of the video-orientation RTP extension (default=none) original value given at command line.  */
  const char *videoorient_ext_help; /**< @brief ID of the video-orientation RTP extension (default=none) help description.  */
  int debug_level_arg;	/**< @brief Debug/logging level (0=disable debugging, 7=maximum debug level; default=4).  */
  char * debug_level_orig;	/**< @brief Debug/logging level (0=disable debugging, 7=maximum debug level; default=4) original value given at command line.  */
  const char *debug_level_help; /**< @brief Debug/logging level (0=disable debugging, 7=maximum debug level; default=4) help description.  */
  int debug_timestamps_flag;	/**< @brief Enable debug/logging timestamps (default=off).  */
  const char *debug_timestamps_help; /**< @brief Enable debug/logging timestamps help description.  */
  int disable_colors_flag;	/**< @brief Disable color in the logging (default=off).  */
  const char *disable_colors_help; /**< @brief Disable color in the logging help description.  */
  char * format_arg;	/**< @brief Specifies the output format (overrides the format from the destination).  */
  char * format_orig;	/**< @brief Specifies the output format (overrides the format from the destination) original value given at command line.  */
  const char *format_help; /**< @brief Specifies the output format (overrides the format from the destination) help description.  */
  int faststart_flag;	/**< @brief For mp4 files write the MOOV atom at the head of the file (default=off).  */
  const char *faststart_help; /**< @brief For mp4 files write the MOOV atom at the head of the file help description.  */
  int audioskew_arg;	/**< @brief Time threshold to trigger an audio skew compensation, disabled if 0 (default=0).  */
  char * audioskew_orig;	/**< @brief Time threshold to trigger an audio skew compensation, disabled if 0 (default=0) original value given at command line.  */
  const char *audioskew_help; /**< @brief Time threshold to trigger an audio skew compensation, disabled if 0 (default=0) help description.  */
  int silence_distance_arg;	/**< @brief RTP packets distance used to detect RTP silence suppression, disabled if 0 (default=100).  */
  char * silence_distance_orig;	/**< @brief RTP packets distance used to detect RTP silence suppression, disabled if 0 (default=100) original value given at command line.  */
  const char *silence_distance_help; /**< @brief RTP packets distance used to detect RTP silence suppression, disabled if 0 (default=100) help description.  */
  int restamp_arg;	/**< @brief If the latency of a packet is bigger than the `moving_average_latency * (<restamp>/1000)` the timestamps will be corrected, disabled if 0 (default=0).  */
  char * restamp_orig;	/**< @brief If the latency of a packet is bigger than the `moving_average_latency * (<restamp>/1000)` the timestamps will be corrected, disabled if 0 (default=0) original value given at command line.  */
  const char *restamp_help; /**< @brief If the latency of a packet is bigger than the `moving_average_latency * (<restamp>/1000)` the timestamps will be corrected, disabled if 0 (default=0) help description.  */
  int restamp_packets_arg;	/**< @brief Number of packets used for calculating moving average latency for timestamp correction (default=10).  */
  char * restamp_packets_orig;	/**< @brief Number of packets used for calculating moving average latency for timestamp correction (default=10) original value given at command line.  */
  const char *restamp_packets_help; /**< @brief Number of packets used for calculating moving average latency for timestamp correction (default=10) help description.  */
  int restamp_min_th_arg;	/**< @brief Minimum latency of moving average to reach before starting to correct timestamps. (default=500).  */
  char * restamp_min_th_orig;	/**< @brief Minimum latency of moving average to reach before starting to correct timestamps. (default=500) original value given at command line.  */
  const char *restamp_min_th_help; /**< @brief Minimum latency of moving average to reach before starting to correct timestamps. (default=500) help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int file_extensions_given ;	/**< @brief Whether file-extensions was given.  */
  unsigned int json_given ;	/**< @brief Whether json was given.  */
  unsigned int header_given ;	/**< @brief Whether header was given.  */
  unsigned int parse_given ;	/**< @brief Whether parse was given.  */
  unsigned int metadata_given ;	/**< @brief Whether metadata was given.  */
  unsigned int ignore_first_given ;	/**< @brief Whether ignore-first was given.  */
  unsigned int payload_type_given ;	/**< @brief Whether payload-type was given.  */
  unsigned int audiolevel_ext_given ;	/**< @brief Whether audiolevel-ext was given.  */
  unsigned int videoorient_ext_given ;	/**< @brief Whether videoorient-ext was given.  */
  unsigned int debug_level_given ;	/**< @brief Whether debug-level was given.  */
  unsigned int debug_timestamps_given ;	/**< @brief Whether debug-timestamps was given.  */
  unsigned int disable_colors_given ;	/**< @brief Whether disable-colors was given.  */
  unsigned int format_given ;	/**< @brief Whether format was given.  */
  unsigned int faststart_given ;	/**< @brief Whether faststart was given.  */
  unsigned int audioskew_given ;	/**< @brief Whether audioskew was given.  */
  unsigned int silence_distance_given ;	/**< @brief Whether silence-distance was given.  */
  unsigned int restamp_given ;	/**< @brief Whether restamp was given.  */
  unsigned int restamp_packets_given ;	/**< @brief Whether restamp-packets was given.  */
  unsigned int restamp_min_th_given ;	/**< @brief Whether restamp-min-th was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_format_values[];  /**< @brief Possible values for format. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* PP_CMDLINE_H */
